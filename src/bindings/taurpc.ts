 // This file has been generated by Specta. DO NOT EDIT.

export type AlbumDate = { year: number; month: number | null; day: number | null }

export type AlbumIpc = { meta: AlbumMetaIpc; tracks: AudioTrackIpc[] }

export type AlbumMetaIpc = { album_artist: string | null; date: SomeAlbumDate; name: string | null }

export type AppErrorIpc = { kind: string; message: string }

export type AudioTrackIpc = { name: string; path: string; artist: string | null; album: string | null; album_artist: string | null; track_no: number | null; date: SomeAlbumDate; binary_hash: string | null }

export type DotfileSchema = { 
/**
 * only linux supports use_mpd for now, setting this to `true` on windows
 * would hard-crash the program
 */
general: GeneralSubSchema; library: LibrarySubSchema | null; mpd: MpdSubSchema | null }

export type GeneralSubSchema = { use_mpd: boolean }

export type LibrarySubSchema = { root: string }

export type MpdSubSchema = { addr: string; port: number }

export type PlayStatus = "Play" | "Pause" | "Stopped"

export type PlaybackState = { now_playing: AudioTrackIpc | null; duration_secs: number | null; status: PlayStatus; shuffle: boolean; repeat: RepeatStatus }

export type RepeatStatus = "Off" | "Repeat" | "RepeatOne"

export type SomeAlbumDate = AlbumDate | null

export type TauRpcPlaybackApiInputTypes = { proc_name: "play"; input_type: { __taurpc_type: AudioTrackIpc } } | { proc_name: "play_pause"; input_type: null } | { proc_name: "set_shuffle"; input_type: { __taurpc_type: boolean } } | { proc_name: "cycle_repeat"; input_type: null } | { proc_name: "set_volume"; input_type: { __taurpc_type: number } } | { proc_name: "ev_playback_state"; input_type: { __taurpc_type: PlaybackState } }

export type TauRpcPlaybackApiOutputTypes = { proc_name: "play"; output_type: PlaybackState } | { proc_name: "play_pause"; output_type: PlayStatus } | { proc_name: "set_shuffle"; output_type: boolean } | { proc_name: "cycle_repeat"; output_type: RepeatStatus } | { proc_name: "set_volume"; output_type: null } | { proc_name: "ev_playback_state"; output_type: null }

export type TauRpcRootApiInputTypes = { proc_name: "load_all"; input_type: null } | { proc_name: "load_music"; input_type: { __taurpc_type: AlbumIpc[] } }

export type TauRpcRootApiOutputTypes = { proc_name: "load_all"; output_type: null } | { proc_name: "load_music"; output_type: null }

const ARGS_MAP = {"playback":"{\"play\":[\"track\"],\"set_volume\":[\"to\"],\"ev_playback_state\":[\"playback_state\"],\"play_pause\":[],\"cycle_repeat\":[],\"set_shuffle\":[\"to\"]}","":"{\"load_all\":[],\"load_music\":[\"data\"]}"}
import { createTauRPCProxy as createProxy } from "taurpc"

export const createTauRPCProxy = () => createProxy<Router>(ARGS_MAP)

type Router = {
	'': [TauRpcRootApiInputTypes, TauRpcRootApiOutputTypes],
	'playback': [TauRpcPlaybackApiInputTypes, TauRpcPlaybackApiOutputTypes],
}